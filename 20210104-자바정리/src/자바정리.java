/*
 *    1. 변수 : 한개의 데이터를 저장. 메모리 공간 (데이터 저장)
 *       배열(여러개를 저장: 같은 데이터형만)
 *       클래스(여러개를 저장 : 다른 데이터형)
 *       ===========================
 *       파일, 오라클
 *       
 *       변수(데이터 한개)
 *       ============
 *       컴퓨터에 명령 : 저장하는 메모리 크기를 지정(데이터형, 자료형)
 *       ============================================
 *       정수
 *         = byte(1byte) : 파일 입출력
 *         = int (4byte) : 일반적인 정수
 *           모든 정수를 int로 인식 default
 *         = long (8byte): 최근 => AI(빅데이터), 금융권
 *           21000000000(x), 21000000000L(형변환 표기가 아니라 크기 정도를 나타내는 것)
 *                           long에 대한 표현법
 *       실수
 *         = double (8byte) : 소수점 15 이상.., 컴퓨터가 인식할 때 실수의 default
 *           10.5 , 10.5F (float)
 *       문자
 *         = char(2byte) (문자 한 개 저장) : ''
 *           =========== char(1byte): ASC, char(2byte): 멀티바이트, UniCode
 *                       ================  ===========
 *                       255문자까지 저장 가능     65535
 *           문자 여러개 저장 : "" => String(클래스 => 기능)
 *           ====> 필요에 따라서 정수형으로 변경이 가능 (모든 문자: 정수형으로 되어 있다)
 *                 'A' : 65, 'a' : 97, '0' : 48
 *       논리
 *         = boolean(1byte): true(1)/false(0)
 *       
 *       변수 선언
 *         1. 데이터형 변수명;
 *            char c;
 *                 ==
 *                 문법(식별자) : 중복된 이름을 쓸 수 없음
 *                 = 알파벳이나 한글로 시작한다 (단 알파벳은 대소문자를 구분)
 *                 = 숫자를 사용할 수 있다 (단 앞에 사용금지)
 *                 = 키워드는 사용할 수 없다
 *                   ==== 자바에서 이미 사용중인 단어
 *                        int, double ... if, else, switch, break, ... (키워드, 예약어)
 *                        이클립스에서는 자두색으로 나타남
 *                 = 특수문자 사용이 가능 (_ , $)
 *         2. 두개 이상 선언 => 같은 데이터형만 묶어서 사용 가능
 *            int a,b; (, : 순서)
 *       변수 초기화
 *         = 명시적 초기화
 *           int a=10; char c='A' => 직접 임의의 값을 첨부
 *              기본값
 *              ====
 *                정수 : int(0), long(0L)
 *                실수 : double(0.0)
 *                문자 : char('\0')
 *                논리 : boolean (false)
 *         = 입력값 초기화
 *           int a;
 *           a=scan.nextInt();
 *         = 난수값 초기값
 *           double d;
 *           d=Math.random()
 *           ***************** 변수에서 초기값이 없는 상태에서 사용할 수 없다(출력, 연산자)
 *         = 파일, 오라클 초기값 : 로그인(id,pwd저장)
 *           ***** 전역변수(클래스 블록), 지역변수(메소드 영역{})
 *           
 *    ====== 연산자, 제어문 (데이터 가공) ======
 *    연산자 
 *      = 단항연산자
 *        ★1. 증감연산자 (++,--) : 반복문에서 주로 사용
 *        2. 부정연산자 (!) : 조건문에서 주로 사용(if, if~else, 삼항연산자)
 *        ★3. 캐스트 연산자 ((type)) : 형변환 연산자
 *           10.5 => 소수점이 필요 없을 때
 *           (int)10.5  ==> DownCasting ==> 강제형변환
 *           'A' => 숫자로 바꿔야 할 때
 *           (int) 'A'  ==> UpCasing ==> 자동형변환 (연산자 사용 시)
 *           10+10.5
 *           ==
 *           10.0        (자동형변환)
 *           10.0+10.5
 *           *** 자바에서 연산처리는 같은 데이터형끼리만 가능
 *      = 이항연산자
 *        1. 산술연산자 (+, -, *, /, %) : 자동형변환(데이터형이 다른 경우)
 *           크기(데이터형)
 *           byte < short, char < int < long < float < double
 *           *** int 이하 데이터형(byte, short, char)은 연산이 된 경우 int
 *           'A'+'B'
 *           === ===
 *           65 + 66  => 131
 *           *** /는 0으로 나눌 수 없고, 정수/정수=정수(실수 아님) 예) 5/2=2  ==> 5/2.0=2.5
 *           *** % 나머지가 왼쪽편 부호를 따라간다 예) -5%-2 = -1
 *        2. 비교연산자 : 결과값(boolean) : 기준점은 왼쪽
 *                     == (같다) (자바프로그램언어 ==, 오라클 =, 자바스크립트 ===)
 *                     != (같지 않다), <(작다), >(크다), <=(작거나 같다), >=(크거나 같다)
 *                     숫자만 비교가 가능 (문자열(equals, compare), 객체(instanceOf)는 비교연산자)
 *        3. 논리연산자 : &&(직렬 => 좌우의 조건 true=true)
 *                    (조건) && (조건)
 *                    =====
 *                      false  ==> 오른쪽에 있는 조건은 취급하지 않는다 (효율적인 연산)
 *                    ||(병렬 => 좌우의 조건 중에 한개가 true)
 *                    (조건) || (조건)
 *                    ====
 *                    true => 오른쪽에 있는 조건은 취급하지 않는다(효율적인 연산)
 *        =================================결과값이 true/false(조건문, 반복문의 조건식)=======================
 *        4. 대입연산자 : 결과값을 대입(연산처리 후)
 *           =, +=, -=
 *           예) +=
 *           int a=10;
 *           a+=10; ========> a=a+10
 *                              =
 *                             10 + 10 => a=20
 *           예) -=
 *           int a=10;
 *           a-=2  ==>  a=a-2
 *                       =
 *                       10-2 => a=8
 *           한개 증가, 감소 : ++, --
 *           여러개 증가, 감소 : +=, -=
 *      = 삼항연산자 : 소스량이 많은 경우 (게임, 웹)
 *          ?:
 *          (조건)?값1:값2
 *          ====
 *          true  => 값1
 *          false => 값2    ======> if~else
 *      =====================================================
 *      제어문
 *        = 조건문(점프가 가능함)
 *          단일조건문 : 에러 처리, 입력 처리, 범위 안에 있는지 여부(유효성 검사)
 *          if(조건문)
 *          {
 *             문장1 : 조건이 true일 경우에만 처리
 *          }
 *          문장2
 *          
 *          선택조건문 : 조건이 true일 때, false일 때를 나눠서 처리
 *          예) 로그인이 된 상태, 안 된 상태
 *             ============  =======
 *                 if          else
 *                ====         ==== ID나 PW가 틀렸다
 *            main 화면으로 이동
 *            
 *             ID 중복체크
 *          if(조건문)
 *          {
 *             조건이 true일 때 처리 (ID가 중복된 경우)
 *          }
 *          else
 *          {
 *             조건이 false일 때 처리 (ID가 중복이 없는 경우)
 *          }
 *          
 *          여러개의 조건 중에 맞는 조건만 처리(다중 조건문)
 *          메뉴 클릭시, 버튼 클릭
 *          if(조건문)
 *          {
 *             조건 true일 때 처리되는 문장
 *                => true => {}에 있는 문장을 처리하고 종료
 *                => false => 다음 조건을 처리하게 만든다
 *          }
 *          else if(조건문)
 *          {
 *             조건 true일 때 처리되는 문장
 *                => true => {}에 있는 문장을 처리하고 종료
 *                => false => 다음 조건을 처리하게 만든다
 *          }
 *          else if(조건문)
 *          {
 *             조건 true일 때 처리되는 문장
 *                => true => {}에 있는 문장을 처리하고 종료
 *                => false => 다음 조건을 처리하게 만든다
 *          }
 *          else
 *          {
 *             해당 조건이 없는 경우에 처리
 *          }
 *        = 선택문
 *          switch~case : 값을 1개 선택(다중 조건문: 범위지정)
 *          {
 *             case 정수:
 *               처리문장
 *               break; // 처리하고 종료
 *             case 정수:
 *               처리문장
 *               break; // 처리하고 종료
 *             default: case에 존재하지 않는 정수가 들어온 경우
 *          }
 *        = 반복문
 *          ★= for
 *          형식)
 *                    1 →  2  ← 4   ==> 2번 false가 되면 종료
 *               for(초기값;조건식;증감식)
 *               
 *               ****** forEach
 *          ★= while : 횟수가 지정이 안된 경우 (파일 읽기, 오라클에서 데이터 읽기)
 *            초기값     ===== 1
 *            while(조건식) == 2 (true: 3번, false: 종료)
 *            {
 *               반복수행 문장 = 3
 *               증감식   ==== 4  ===> 2번으로 이동
 *            }
 *          = do~while: 후 조건 = 반드시 한 번 이상을 수행할 때
 *            형식)
 *                 초기값  =============== 1
 *                 do{
 *                      반복 수행문장   ==== 2
 *                      증감식        ==== 3
 *                 }while(조건문);    ==== 4 => true : 2번으로 이동
 *                                            false : 종료
 *        = 반복제어문
 *          ★= break : 반복문, switch~case에서만 사용
 *            for()
 *            {
 *               if()
 *               {
 *                  break;
 *               }
 *            }
 *            
 *            if()
 *            {
 *               brek; (x)
 *            }
 *          = continue : 특정부분을 제외할 때 사용
 *          *** while : break는 똑같지만, continue가 걸리면 조건식으로 이동한다
 *          *** for : conitnue => 증가식으로 이동: 제외하고 싶은 경우에 주로 사용
 */
public class 자바정리 {
	// 전역변수(클래스블록)

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		// 지역변수(메소드{} 영역)
		
		// 1~10까지 출력하는 반복문 사용
		System.out.println("========for=========");
		for(int i=1;i<=10;i++)
		{
			System.out.print(i+" ");
		}
		System.out.println();
		System.out.println("===== while =====");
		int i=1;
		while(true)
		{
			if(i>10) break;
			System.out.print(i+" ");
			i++;
		}
		System.out.println();
		System.out.println("===== do~while =====");
		i=1;
		do
		{
			System.out.print(i+" ");
			i++;
		}while(i<=10);

	}

}
