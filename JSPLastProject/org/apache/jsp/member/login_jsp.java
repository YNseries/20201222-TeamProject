/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.63
 * Generated at: 2021-04-05 11:52:12 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.member;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class login_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css\">\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write(".row {\r\n");
      out.write("   width:300px;\r\n");
      out.write("   margin: 0px auto;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("<script type=\"text/javascript\" src=\"http://code.jquery.com/jquery.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("// Jquery => javascript 라이브러리\r\n");
      out.write("// $(document).ready(function(){}) => window.onload => main\r\n");
      out.write("$(function(){\r\n");
      out.write("\t$('#canBtn').click(function(){\r\n");
      out.write("\t\t// 취소버튼 클릭 시 처리\r\n");
      out.write("\t\tparent.Shadowbox.close();\r\n");
      out.write("\t});\r\n");
      out.write("\t$('#logBtn').click(function(){\r\n");
      out.write("\t\t// 로그인 버튼 클릭시 처리\r\n");
      out.write("\t\tlet id=$('#id').val();\r\n");
      out.write("\t\t/*\r\n");
      out.write("\t\t\tval() : <input type=text value=\"\"> 입력한 값, value에 저장된 값 읽기\r\n");
      out.write("\t\t\ttext(): <td>값</td>  => 태그는 없어지고 값만 갖고오는\r\n");
      out.write("\t\t\thtml(): <td><span>값</span></td> ==> <span>값</span>\r\n");
      out.write("\t\t\tattr(): <img src=\"\"> 속성값 읽기\r\n");
      out.write("\t\t\t============================================ getter\r\n");
      out.write("\t\t\tval(\"값\"),text(\"\")     setter(값이 안에 들어갈 때)\r\n");
      out.write("\t\t*/\r\n");
      out.write("\t\tif(id.trim()==\"\")\r\n");
      out.write("\t\t{\r\n");
      out.write("\t\t\t$('#id').focus();   // 아이디 입력할 때까지 절대 넘어가지 않음\r\n");
      out.write("\t\t\treturn;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tlet pwd=$('#pwd').val();\r\n");
      out.write("\t\tif(pwd.trim()==\"\"){\r\n");
      out.write("\t\t\t$('#pwd').focus();\r\n");
      out.write("\t\t\treturn;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t// login을 요청하고 => 결과값을 받아서 처리\r\n");
      out.write("\t\t// login.do (요청) => DispatcherServlet => MemberModel => jsp에 결과값 출력\r\n");
      out.write("\t\t//     .do의 요청 => 데이터 전송 방식 선택(GET, POST)\r\n");
      out.write("\t\t// 페이지 변환 처리가 가능\r\n");
      out.write("\t\t$.ajax({\r\n");
      out.write("\t\t\ttype:'POST',\r\n");
      out.write("\t\t\turl:'../member/login.do',\r\n");
      out.write("\t\t\tdata:{\"id\":id,\"pwd\":pwd},\r\n");
      out.write("\t\t\tsuccess:function(result){\r\n");
      out.write("\t\t\t\tlet s=result.trim();\r\n");
      out.write("\t\t\t\tif(s==\"NOID\"){\r\n");
      out.write("\t\t\t\t\talert(\"아이디가 존재하지 않습니다!!\");\r\n");
      out.write("\t\t\t\t\t$('#id').val(\"\");\r\n");
      out.write("\t\t\t\t\t$('#pwd').val(\"\");\r\n");
      out.write("\t\t\t\t\t$('#id').focus();\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\telse if(s==\"NOPWD\"){\r\n");
      out.write("\t\t\t\t\talert(\"비밀번호가 틀립니다!!\");\r\n");
      out.write("\t\t\t\t\t$('#pwd').val(\"\");\r\n");
      out.write("\t\t\t\t\t$('#pwd').focus();\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\telse{\r\n");
      out.write("\t\t\t\t\t// 이동 => main.do로\r\n");
      out.write("\t\t\t\t\tparent.location.href=\"../main/main.do\";\r\n");
      out.write("\t\t\t\t\t// 여기에 parent 없으면, focus가 shadowBox에 있음 => 그 안에 새로운 페이지가 떠 버림\r\n");
      out.write("\t\t\t\t\t// 때문에 이 focus 없애고 바깥으로 나오도록 parent. 넣어줘야 함\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\t/*\r\n");
      out.write("\t\t\t{\"id\":id,\"pwd\":pwd} => 변환\r\n");
      out.write("\t\t\t../member/login.do?id=admin&pwd=1234\r\n");
      out.write("\t\t*/\r\n");
      out.write("\t})\r\n");
      out.write("});\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("  <div style=\"height:20px\"></div>\r\n");
      out.write("  <div class=\"container\">\r\n");
      out.write("    <div class=\"row\">\r\n");
      out.write("      <table class=\"table\">\r\n");
      out.write("        <tr>\r\n");
      out.write("          <th width=30% class=\"text-right danger\">ID</th>\r\n");
      out.write("          <td width=70%>\r\n");
      out.write("            <input type=text name=id size=15 class=\"input-sm\" id=id>\r\n");
      out.write("          </td>\r\n");
      out.write("        </tr>\r\n");
      out.write("        <tr>\r\n");
      out.write("          <th width=30% class=\"text-right danger\">Password</th>\r\n");
      out.write("          <td width=70%>\r\n");
      out.write("            <input type=password name=pwd size=15 class=\"input-sm\" id=pwd>\r\n");
      out.write("          </td>\r\n");
      out.write("        </tr>\r\n");
      out.write("        <tr>\r\n");
      out.write("          <td colspan=\"2\" class=\"text-center\">\r\n");
      out.write("            <input type=\"button\" value=\"로그인\" class=\"btn btn-sm btn-success\" id=\"logBtn\">\r\n");
      out.write("            <input type=\"button\" value=\"취소\" class=\"btn btn-sm btn-info\" id=\"canBtn\">\r\n");
      out.write("          </td>\r\n");
      out.write("        </tr>\r\n");
      out.write("      </table>\r\n");
      out.write("    </div>\r\n");
      out.write("  </div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
