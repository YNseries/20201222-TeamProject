/*
 *    객체지향언어
 *      = 재사용성 높다
 *      = 코드의 관리 용이(클래스: 한 개, 한 사람 정보 / 메소드: 한 개의 기능)
 *      = 신뢰성이 높다
 *    ========================================================
 *      클래스, 객체
 *      ====  ===
 *      설계도  실제 동작(설계한 대로 움직이는 것)
 *      ====
 *      객체 => 속성 / 기능
 *             예) 사람: 코, 입
 *                    ===
 *                    냄새를 맡는다, 먹는다, 말한다
 *                 속성: 멤버변수
 *                      = 각자 사용하는 변수(따로 사용): 인스턴스(객체)변수 => 많이 사용되는 변수(중심)
 *                      = 공통으로 사용하는 변수: 정적변수, 공유변수, 공통변수
 *                      ======================================== static(범위에따라 달라질 수 있음)
 *                      2,3,4층
 *                      =======
 *                      각 층마다 정수기
 *                 기능: 메소드
 *                 ===========
 *                         메모리에 저장(인스턴스화)
 *      클래스(설계) ====================================> 인스턴스(객체)
 *      ****** 메모리에 저장을 하게 되면 각자 따로 메모리가 생성되기 때문에 반드시 .을 이용해서 메모리에 접근을 해야 함
 *             . (메모리 주소 접근 연산자)
 *      A a=new A()  => a라는 주소에 저장
 *      A b=new A()  => b라는 주소에 저장
 *      클래스는 사용자 정의 데이터형 => 저장공간(heap) => new를 이용해서 사용한다
 *      ** 저장할 메모리 공간을 만든다
 *      ** .을 이용해서 메모리에 접근 후 사용
 *      ** 클래스명.  : static
 *         Math.random()
 *         ====
 *         클래스
 *         System.out                     // Java에서는 대문자로 시작하면 클래스명
 *         Scanner scan=new Scanner();    // 사용자가 생성한 후에 가면,
 *         scan.nextInt()                 // 인스턴스
 *         
 *         *** 자바에서 지원하는 클래스 => 알파벳으로 시작(첫자 대문자) / 전체 대문자: 상수
 */
public class Movie {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		

	}

}
